replicaCount: 1

image:
  repository: ohenriquerabelo/todo_back  # Substitua pelo nome do seu repositório de imagem
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v3"  # Substitua pela tag específica se necessário

imagePullSecrets: []
nameOverride: "backend-postgres"
fullnameOverride: "backend-postgres"


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP  # Pode ser alterado para LoadBalancer se necessário expor externamente
  port: 3000


ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # Aqui você pode especificar limites de CPU/memória se necessário
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /todos  # Certifique-se de que este seja o endpoint correto para verificar a saúde do seu serviço
    port: http
readinessProbe:
  httpGet:
    path: /todos  # Certifique-se de que este seja o endpoint correto para verificar se o serviço está pronto
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

env:
  DB_NAME: "todo_list_db"
  DB_USER: "backend"
  DB_PASSWORD: "root"
  DB_HOST: "postgres-postgresql-helm.default.svc.cluster.local"
              